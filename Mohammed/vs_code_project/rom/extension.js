// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
const vscode = require('vscode');

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');


// This method is called when your extension is activated
// Your extension is activated the very first time the command is executed

/**
 * @param {vscode.ExtensionContext} context
 */
function activate(context) {

	// Use the console to output diagnostic information (console.log) and errors (console.error)
	// This line of code will only be executed once when your extension is activated
	console.log('Congratulations, your extension "rom" is now active!');

	// The command has been defined in the package.json file
	// Now provide the implementation of the command with  registerCommand
	// The commandId parameter must match the command field in package.json
	/*let disposable = vscode.commands.registerCommand('rom.helloWorld', function () {
		// The code you place here will be executed every time your command is executed

		// Display a message box to the user
		vscode.window.showInformationMessage('Hello World from ROM!');
	});*/
    


    let disposable = vscode.commands.registerCommand('rom.executeBashScript', function () {
        // Check if there is at least one workspace folder open
        if (!vscode.workspace.workspaceFolders || vscode.workspace.workspaceFolders.length === 0) {
            vscode.window.showErrorMessage('No workspace folder is open.');
            return; // Exit early if no workspace folder is open
        }
       

        const scriptPath = path.join(vscode.workspace.workspaceFolders[0].uri.fsPath, './runme.py');
        
        // Path for the output file, in the workspace folder for example
        const outputPath = path.join(vscode.workspace.workspaceFolders[0].uri.fsPath, 'scriptOutput.txt');
        
        //const codePath = path.join(vscode.workspace.workspaceFolders[0].uri.fsPath, '../vs_code_project/code');
        //const codePath = vscode.window.activeTextEditor.scriptPath;
        const codePath = `/Users/mohammadratrout/Desktop/testPy/leakSanitaizerTest.c`

        // For linux, change it to be bash
        vscode.window.showErrorMessage(`python3 ${scriptPath} ${codePath}`);
        
        exec(`python3 ${scriptPath} ${codePath}`, (error, stdout, stderr) => {
            let output = stdout;

            if (error) {
                output += `\nError: ${error.message}`;
            }
            
            if (stderr) {
                output += `\nStderr: ${stderr}`;
            }


            fs.writeFile(outputPath, output, err => {

                if (err) {
                    vscode.window.showErrorMessage('Failed to write the script output.');
                    return console.error(err);
                }

                vscode.window.showInformationMessage('Script output saved successfully.');
            });
        });
    });

	context.subscriptions.push(disposable);

}

// This method is called when your extension is deactivated
function deactivate() {}

module.exports = {
	activate,
	deactivate
}
