#0
/home/rostin/Desktop/Vulnerability_Scanner/Test.java:8: warning: Thread Safety Violation
  Unprotected write. Non-private method `Test.buy(...)` writes to field `this.shares` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
   6.    public void buy(int count) {
   7.      if (count > 0) {
   8. >      shares += count;
   9.      }
  10.    }

#1
/home/rostin/Desktop/Vulnerability_Scanner/Test.java:13: warning: Thread Safety Violation
  Read/Write race. Non-private method `Test.sell(...)` reads without synchronization from `this.shares`. Potentially races with write in method `Test.buy(...)`.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  11.   
  12.    public int sell(int count){
  13. >    if (count >= 0 && shares - count >= 0) {
  14.        shares -= count;
  15.        return shares;

#2
/home/rostin/Desktop/Vulnerability_Scanner/Test.java:14: warning: Thread Safety Violation
  Unprotected write. Non-private method `Test.sell(...)` writes to field `this.shares` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  12.    public int sell(int count){
  13.      if (count >= 0 && shares - count >= 0) {
  14. >      shares -= count;
  15.        return shares;
  16.      } else {

Found 3 issues
                        Issue Type(ISSUED_TYPE_ID): #
  Thread Safety Violation(THREAD_SAFETY_VIOLATION): 3
