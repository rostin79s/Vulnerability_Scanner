import os 
import subprocess
import sys
import llm
import cve

l = []

def ai_solver(error,name,l):
    print(name)
    # this case needs to be handled
    if error==None:
        l = -1
    error += "give me in the name of the vulnerability, line of code where it happens, and the function in a list of commas like this: [vuln,line,name_func]"
    print(-1)
    resp = llm.main(error)
    print(resp)
    resp = resp.strip("[]")
    resp = resp.split(",")
    resp = [s.strip() for s in resp]
    print(resp)
    l.append(int(resp[1]))
    prompt = "This code below has a " + resp[0] + " vulenrability in the function " + resp[2] + " at line number " + resp[1] +". Fix the code and only give code as ouptut\n"
    print(prompt)
    print(name)
    with open(name, 'r') as file:
        print(-1)
        code = file.read()

    prompt+=code


    resp = llm.main(prompt)
    i = name.rfind('.')
    name = name[0:i] + "_corrected" + name[i:]
    print(name)
    with open(name,'w') as file:
        file.write(resp)

src_code_filename = "../../thread_race"

command = ["bash", "bash.sh", src_code_filename]
result = subprocess.run(command, capture_output=True, text=True)

error = result.stderr
ai_solver(error,"../../thread_race.cpp",l)

#testing java
command = ["infer", "--racerd-only", "--", "javac", "-cp", "../../jcip-annotations-1.0.jar", "../../Test.java"]

result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

error = result.stdout
print(error)
ai_solver(error,"../../Test.java",[])

#testing that CVE api works correctly

# ver = "0.26.0"
# name = "Exiv2"

# if cve.main(name,ver):
#     l.append(1)

# print(l)

#testing CVE api for java
